#+title: Algorithm Analysis
#+subtitle: Computation Model to Better Compare Algorithms
#+author: Franck Chauvel
#+date: May 22, 2021
#+language: en


* Introduction


* Using Parameters


  #+header: :results output
  #+header: :python python3
  #+begin_src python
    def sum_of_even(limit):
       total = 0
       any_integer = 0
       while any_integer <= limit:
          if any_integer % 2 == 0:
              total = total + any_integer
          any_integer = any_integer + 1
       return total

    print("Total:", sum_of_even(100))
  #+end_src

  #+RESULTS:
  : Total: 2550


  Sometimes there are more than parameters that are unknown, for
  example, what about if we stop counting all the value until limit,
  but the user gives us the value to add?
  
  #+header: :python python3
  #+begin_src python
    def sum_of_integer(limit):
        total = 0
        counter = 0
        while counter<limit:
            value = int(input("?"))
            if value % 2 == 0:
                total = total + value
            counter = counter + 1
        return total

    print("Total:", sum_of_integer(5))
  #+end_src

* 

  
  

* Example

  #+name: input-data
  #+begin_src
  100
  #+end_src


  #+header: :stdin input-data
  #+header :results verbatim
  #+begin_src ruby
    total = 0
    each = 0
    limit = gets.to_i
    while each <= limit
     if each.modulo(2) == 0
       total = total + each
     end
     each = each + 1
    end
    puts total
  #+end_src

  #+RESULTS:
  : nil

* Average Case

  \begin{align}
time(\ell, C) &= 5\ell + 2C + 9 \\
\text{Exp}[time(\ell, C)] &= \sum_{c \in C} \Pr[C=c] \cdot time(\ell, c) \\
                          &= \sum_{c=0}^{\ell} \frac{1}{\ell+1} \cdot time(\ell, c) \\
                          &= \frac{1}{\ell+1} \sum_{c=0}^{\ell} 5\ell + 2c + 9\\
                          &= \frac{1}{\ell+1} \left[ \sum_{c=0}^{\ell} (5\ell+9) + \sum_{c=0}^{\ell} 2c \right]\\
                          &= \frac{1}{\ell+1} \left[ (\ell+1) \cdot (5\ell+9) + 2\cdot\frac{\ell\cdot (\ell+1)}{2}\right]\\
                          &= 6\ell+9 \\
                          \end{align}


#+header: :R-dev-args bg="transparent"
#+header: :exports results 
#+header: :file ../assets/images/algorithm_analysis.png 
#+header: :results graphics file                          
#+begin_src R
  best_case <- function(l) { 5*l+10 }
  worse_case <- function(l) { 7*l+10 }
  average_case <- function(l) { 6*l+10  }

  sizes <- seq(1,100);
  plot(sizes, sapply(sizes, worse_case),
     type="l",
     col="darkred",
     xlab="input size",
     ylab="runtime efficiency (cycle)");
  lines(sizes, sapply(sizes, best_case),
      col="darkgreen");
  lines(sizes, sapply(sizes, average_case),
      col="orange",
      lty=2);

    # Random sampling the full distribution
    runtime <- function(l, c) { 5*l + 10 + 2*c}

    sizes <- runif(200, 0, 100);

    points(sizes, sapply(sizes, function(s) {runtime(s, runif(1, 0, s))}),
         pch=4,
         col="grey");

    legend("topleft", inset=0.05,
            legend=c("worse case", "best case", "average case", "random samples"),
            box.lty=0,
           col=c("darkred", "darkgreen", "orange", "grey"),
            pch=c(NA, NA, NA, 4),
            lty=c(1, 1, 2, NA),
            cex=0.8)
#+end_src

#+RESULTS:
[[file:../assets/images/algorithm_analysis.png]]
