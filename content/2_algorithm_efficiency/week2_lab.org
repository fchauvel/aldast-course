


* Minimum of two

  #+header: :results output
  #+header: :classname Maximum
  #+begin_src java
    public class Maximum {

    public static int maximum(int left, int right) {
       if (left < right) {
           return right;
       }
       return left;
    }
    
    public static void main(String[] args) {  
        System.out.println(maximum(10, 5));
    }  
  }
 #+end_src

 

 #+RESULTS:
 : 2
 

* Rock Paper Scissor

  #+header: :results output
  #+header: :classname RockPaperScissor
  #+begin_src java
   // P1 takes value from {R, P, S, E}
   public static int play(int player1, int player2) {     // Pr[P1 = v1] = 1/4 = Pr[P2 = v2] 
       if (player1 == ROCK && player2 == ROCK) {          // Pr[P1=R] * Pr[P2=R] = 1/16
            return 0;
        } else if (player1 == ROCK && player2 == PAPER) { //  1/16
            return 2;
        } else if (player1 == ROCK && player2 == SCISSOR) { //
            return 1;
        } else if (player1 == PAPER && player2 == ROCK) {
            return 1;
        } else if (player1 == PAPER && player2 == PAPER) {
            return 0;
        } else if (player1 == PAPER && player2 == SCISSOR) {
            return 2;
        } else if (player1 == SCISSOR && player2 == ROCK) {
            return 1;
        } else if (player1 == SCISSOR && player2 == PAPER) {
            return 1;
        } else if (player1 == SCISSOR && player2 == SCISSOR) {
            return 0;
        } else {
           throw new RuntimeException("Invalid Input"); // 7/16
           // P1 = E && P2 in [R, P, S] 3 cases
           // P2 = E & P1 in [R, P, S]  3 cases
           // P1 && P2 = E              1 case
           // 7 cases
        }
     }
 #+end_src
  

  
  | Cases | Player 1 | Player 2 | Pr.  | CPU | Total |
  |-------+----------+----------+------+-----+-------|
  |       | rock     | rock     | 1/16 |   4 | 4/16  |
  |       | rock     | paper    | 1/16 |   7 | 7/16  |
  |       | rock     | scissor  | 1/16 |  10 |       |
  |       | paper    | rock     | 1/16 |  13 |       |
  |       | paper    | paper    | 1/16 |  16 |       |
  |       | paper    | scissor  | 1/16 |  19 |       |
  |       | scissor  | rock     | 1/16 |  22 |       |
  |       | scissor  | paper    | 1/16 |  25 |       |
  |       | scissor  | scissor  | 1/16 |  28 |       |
  |       | Error    | Error    | 7/16 |  29 |       |

  #+header: :results output
  #+header: :python python3
  #+begin_src python
    average = 0
    proba = 1/9
    index = 1
    while index <= 9:
         print(index * 3)
         average += index * 3 * proba
         index += 1
    print(average)
  #+end_src

  #+RESULTS:
  #+begin_example
  3
  6
  9
  12
  15
  18
  21
  24
  27
  14.999999999999998
  #+end_example
  
* Pyramid


  #+header: :results output
  #+header: :classname Triangle
  #+begin_src java
    public class Triangle {
        public static void printTriangle(int height) {
            for(int row=0 ; row<height ; row++){  
                for(int column=row ; column<height ; column++){  
                    System.out.print("* ");  
                }  
                System.out.println();  
            } 
        }

        public static void main(String[] args) {  
            printTriangle(10);
        }  
    }  
  #+end_src


  

  #+RESULTS:
  #+begin_example
  ,**********
  ,*********
  ,********
  ,*******
  ,******
  ,*****
  ,****
  ,***
  ,**
  ,*
  #+end_example
