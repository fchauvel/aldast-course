#+title: Merge Sort
#+subtitle: Sorting with Divide and Conquer
#+author: Franck Chauvel
#+date: June 4, 2021
#+language: en



* Introduction



* Merging Sorted Sequences

  #+begin_src java
    static int[] merge(int[] left, int[] right, int[] merged) {
        int leftIndex = 0, rightIndex = 0;
        while (leftIndex < left.length && rightIndex < right.length) {
            if (left[leftIndex] <= right[rightIndex]) {
                merged[leftIndex + rightIndex] = left[leftIndex];
                leftIndex += 1;
            } else {
                merged[leftIndex + rightIndex] = right[rightIndex];
                rightIndex += 1;
            }
        }
        while (leftIndex < left.length) {
            merged[leftIndex + rightIndex] = left[leftIndex];
            leftIndex += 1;
        }
        while (rightIndex < right.length) {
            merged[rightIndex + leftIndex] = right[rightIndex];
            rightIndex += 1;
        }
        return merged;
    }
  #+end_src


* Merge Sort

  #+begin_src java
    static int[] mergeSort(int[] array) {
        if (array.length < 2) {
            return array;
        }

        int middle = (int) array.length / 2;
        int[] left = new int[middle];
        for (int i=0 ; i<middle ; i++) left[i] = array[i];
        int[] right = new int[array.length-middle];
        for (int i=0 ; i<array.length-middle ; i++) right[i] = array[middle+i];

        int[] result = new int[array.length];
        return merge(mergeSort(left), mergeSort(right), result);
    }
  #+end_src
