#+title: Supporting Material
#+subtitle: Examination Appendix
#+date: Dec. 2021
#+author: IDATA 2302


#+OPTIONS: toc:nil

These information may or may not be useful. I put them as they are
typical things that one would check online or in textbooks.

* Efficiency of Common Data Structures

  | Data structure     |  Operation        | Time        | Space  |
  |--------------------+-------------------+-------------+--------|
  | Array              | insert (anywhere) | $O(n)$      | $O(1)$ |
  |                    | access            | $O(1)$      | $O(1)$ |
  |                    | find              | $O(n)$      | $O(n)$ |
  |                    | delete (anywhere) | $O(n)       | $O(1)$ |
  |--------------------+-------------------+-------------+--------|
  | Linked List        | insert            | $O(n)$      | $O(1)$ |
  | (singly)           | access            | $O(n)$      | $O(1)$ |
  |                    | delete (anywhere) | $O(n)$      | $O(n)$ |
  |                    | find              | $O(n)$      | $O(1)$ |
  |--------------------+-------------------+-------------+--------|
  | Linked List        | insert            | $O(1)$      | $O(1)$ |
  | (doubly)           | access            | $O(n)$      | $O(1)$ |
  |                    | delete (anywhere) | $O(1)$      | $O(n)$ |
  |                    | find              | $O(n)$      | $O(1)$ |
  |--------------------+-------------------+-------------+--------|
  | Hash table         | insert            | $O(1)$      | $O(1)$ |
  |                    | access            | $O(1)$      | $O(1)$ |
  |                    | delete            | $O(1)$      | $O(1)$ |
  |                    | find              | $O(n)$      | $O(1)$ |
  |--------------------+-------------------+-------------+--------|
  | Binary Search Tree | insert            | $O(\log n)$ | $O(1)$ |
  |                    | access            | $O(\log n)$ | $O(1)$ |
  |                    | delete            | $O(\log n)$ | $O(1)$ |
  |                    | find              | $O(\log n)$ | $O(1)$ |
  |--------------------+-------------------+-------------+--------|
  | AVL Tree           | insert            | $O(\log n)$ | $O(1)$ |
  |                    | access            | $O(\log n)$ | $O(1)$ |
  |                    | delete            | $O(\log n)$ | $O(1)$ |
  |                    | find              | $O(\log n)$ | $O(1)$ |
  |--------------------+-------------------+-------------+--------|
  
* Efficiency of Common Algorithms 


  | Algorithm                |  Time          |  Space         | Note                  |
  |--------------------------+----------------+----------------+-----------------------|
  | Linear search            | $O(n)$         | $O(1)$         | $n$ collection length |
  | Jump search              | $O(\sqrt{n})$  | $O(1)$         |                       |
  | Binary search            | $O(\log n)$    | $O(1)$         |                       |
  |--------------------------+----------------+----------------+-----------------------|
  | Insertion sort           | $O(n^2)$       | $O(1)$         |                       |
  | Selection sort           | $O(n^2)$       | $O(1)$         |                       |
  | Bubble sort              | $O(n^2)$       | $O(1)$         |                       |
  | Merge sort               | $O(n \log n)$  | $O(n)$         |                       |
  | Quick sort               | $O(n \log n)$  | $O(n)$         |                       |
  | Heap sort                | $O(n \log n)$  | $O(1)$         |                       |
  |--------------------------+----------------+----------------+-----------------------|
  | Counting sort            | $O(n+k)$       | $O(k)$         | $k$ is the number     |
  | Radix sort               | $O(nk)$        | $O(n+k)$       | of digit              |
  |--------------------------+----------------+----------------+-----------------------|
  | Breadth-first search     | $O(V+E)$       | $O(V+E)$       | Vertices & Edges      |
  | Depth-first search       | $O(V+E)$       | $O(V+E)$       |                       |
  | Dijsktra's shortest path | $O(E \log V)$  | $O(V+E)$       |                       |
  | Bellman Ford             | $O(E \cdot V)$ | $O(E \cdot V)$ |                       |
  | Floyd Warhsall           | $O(V^3)$       | $O(V^3)$       |                       |
  | Prim's MST               | $O(E \log V)$  | $O(V+E)$       |                       |
  | Kruskal's MST            | $O(E \log V)$  | $O(E+V)$       |                       |
  |--------------------------+----------------+----------------+-----------------------|

* Powers & Logarithms

  - \( \log_a 1 = 0 \)

  - \( \log_a a = 1 \)

  - \( \log_a n^b = b \log_a n \)

  - \( \log_a xy = \log_a x + \log_a y \)

  - \( \log_a \frac{x}{y} = \log_a x - \log_a y \)

  - \( \log_a x = \frac{\log_b x}{\log_b a} = \log_a b \log_b x  \)

* Sums

  - \( \sum_{i=1}^{n} f(i) = f(1) + f(2) + \ldots + f(n) \)
  - \( \sum_{i=1}^{n} k \cdot f(n) = k \cdot \sum_{i=1}^{n} f(i) \)
  - \( \sum_{i=1}^{n} 1 = n+1 \)
  - \( \sum_{i=1}^{n} i = \frac{n(n+1)}{2} \)
  - \( \sum_{i=1}^{n} i^k \approx \frac{n^{k+1}}{k+1} \)
  - \( \sum_{i=1}^{n} a^i = \frac{a^{n+1}-1}{a-1} \)
  - \( \sum_{i=1}^{n} \frac{1}{i} \approx \ln n + \gamma \) where $\gamma = 0.5772$ (Euler's constant)
  - \( \sum_{i=1}^{n} \log i \approx n \log n \)
    

* Linear Recurrences

  - When \( T(n) = T(n-1) + f(n) \)
    then \( T(n) =  T(0) + \sum_{i=1}^{n} f(i) \)

  - Master theorem
    \begin{align*}
       T(n) = \begin{cases}
          a T(\frac{n}{b}) + f(n) & n > 1 \\
          c & n=1
       \end{cases}
    \end{align*}
    Then, if $f(n) \in \Theta(n^d)$, we can conclude:
    \begin{align*}
    T(n) \in \begin{cases}
       \Theta(n^d) & \text{if } a < b^d  \\
       \Theta(n^d \log n) & \text{if } a = b^d \\
       \Theta(n^{\log_b a}) & \text{if } a > b^d
    \end{cases}
    \end{align*}

* Combinatorics

  - The number of permutations of an n-element set is $n!$
  - The number of k-combinations of an n-element set is $\binom{n}{k}$
  - The number of subsets of an n-element set is $2^n$

